			如何写linux PCI驱动
			How To Write Linux PCI Drivers

		by Martin Mares <mj@ucw.cz> on 07-Feb-2000
	updated by Grant Grundler <grundler@parisc-linux.org> on 23-Dec-2006

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PCI的世界非常丰富多彩并且充满惊喜。因为每一个CPU架构实现不同的芯片集和PCI设备有不同的需求,结果就是内核对PCI的支持不像一个人想的那样简单。这个简单的文章想要介绍所有潜在的PCI设备驱动来源和PCI设备驱动的linux内核接口。
The world of PCI is vast and full of (mostly unpleasant) surprises.
Since each CPU architecture implements different chip-sets and PCI devices
have different requirements (erm, "features"), the result is the PCI support
in the Linux kernel is not as trivial as one would wish. This short paper
tries to introduce all potential driver authors to Linux APIs for
PCI device drivers.

一个更完善的资源来自于LDD，LDD3可以免费从如下网址得到(在知识共享许可协议下):
http://lwn.net/Kernel/LDD3/
然而,请记在心里:所有的文档都有可能造成数据污染.如果这里描述的不太正确,请查看源代码.
A more complete resource is the third edition of "Linux Device Drivers"
by Jonathan Corbet, Alessandro Rubini, and Greg Kroah-Hartman.
LDD3 is available for free (under Creative Commons License) from:

	http://lwn.net/Kernel/LDD3/

However, keep in mind that all documents are subject to "bit rot".
Refer to the source code if things are not working as described here.

如有问题请发邮件到"Linux PCI" <linux-pci@atrey.karlin.mff.cuni.cz>邮件列表。
Please send questions/comments/patches about Linux PCI API to the
"Linux PCI" <linux-pci@atrey.karlin.mff.cuni.cz> mailing list.


0. PCI驱动程序结构
0. Structure of PCI drivers
~~~~~~~~~~~~~~~~~~~~~~~~~~~
PCI驱动程序通过pci_register_driver发现系统中的PCI设备()。实际上，有其他方法来完成相同的事。当PCI通用代码发现一个新的设备，匹配的驱动会被通知。详细信息如下。
PCI drivers "discover" PCI devices in a system via pci_register_driver().
Actually, it's the other way around. When the PCI generic code discovers
a new device, the driver with a matching "description" will be notified.
Details on this below.

pci_register_driver()探测设备的大部分工作留在在PCI层，并支持在线插入/删除设备[从而
支持在单个驱动器​中​热插拔PCI，CardBus的和Express卡。pci_register_driver()调用需要传递的函数表指针，从而决定了一个驱动的高级别结构。

一旦司机知道PCI设备，并取得所有权，该驱动就执行以下初始化：
	启用该设备
	请求MMIO / IOP资源
	设置DMA mask大小(用于一致和流DMA)
	分配和初始化共享控制数据(pci_allocate_coherent())
	获取设备配置空间(如果需要)
	注册IRQ处理程序(的request_irq())
	初始化非PCI(即LAN/SCSI/etc的部分)
	启用DMA/处理引擎
完成使用设备时，模块需要被卸载，驱动需要执行如下步骤：
	禁止设备发生IRQ
	释放IRQ(free_irq())
	停止所有DMA活动
	释放DMA缓冲区
	从其他子系统注销（如SCSI或NETDEV）
	发布 MMIO / IOP 资源
	禁用该设备

大多数的这些话题涵盖在下面的章节。
对于剩下的部分请查看LDD3或者<linux / pci.h>。

如果PCI子系统未配置（CONFIG_PCI未设置），大多数的下面描述的PCI函数要么定义为空返回值内联函数或只返回一个适当的错误代码，以避免很多ifdef的使用。
pci_register_driver() leaves most of the probing for devices to
the PCI layer and supports online insertion/removal of devices [thus
supporting hot-pluggable PCI, CardBus, and Express-Card in a single driver].
pci_register_driver() call requires passing in a table of function
pointers and thus dictates the high level structure of a driver.

Once the driver knows about a PCI device and takes ownership, the
driver generally needs to perform the following initialization:

	Enable the device
	Request MMIO/IOP resources
	Set the DMA mask size (for both coherent and streaming DMA)
	Allocate and initialize shared control data (pci_allocate_coherent())
	Access device configuration space (if needed)
	Register IRQ handler (request_irq())
	Initialize non-PCI (i.e. LAN/SCSI/etc parts of the chip)
	Enable DMA/processing engines

When done using the device, and perhaps the module needs to be unloaded,
the driver needs to take the follow steps:
	Disable the device from generating IRQs
	Release the IRQ (free_irq())
	Stop all DMA activity
	Release DMA buffers (both streaming and coherent)
	Unregister from other subsystems (e.g. scsi or netdev)
	Release MMIO/IOP resources
	Disable the device

Most of these topics are covered in the following sections.
For the rest look at LDD3 or <linux/pci.h> .

If the PCI subsystem is not configured (CONFIG_PCI is not set), most of
the PCI functions described below are defined as inline functions either
completely empty or just returning an appropriate error codes to avoid
lots of ifdefs in the drivers.


1. pci_register_driver()调用
1. pci_register_driver() call
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PCI设备驱动程序初始化中调用pci_register_driver()，使用的结构体描述了驱动程序(结构pci_driver)：
PCI device drivers call pci_register_driver() during their
initialization with a pointer to a structure describing the driver
(struct pci_driver):
        字段名称         说明
	field name	Description
	----------	------------------------------------------------------
        id_table        驱动感兴趣的设备ID的表指针中.大多数驱动程序应该导出此表使用.MODULE_DEVICE_TABLE(pci,..).
	id_table	Pointer to table of device ID's the driver is
			interested in.  Most drivers should export this
			table using MODULE_DEVICE_TABLE(pci,...).
        probe           这个探测函数(执行pci_register_driver()对现有的设备或如果新的设备被插入)为ID表中的所有设备调用，这些设备不能被其他驱动"占用"。这个函数为每个在ID表项中的设备获取一个pci_dev *指针来匹配设备。probe函数返回零或者错误代码。probe函数总是会从进程上下文切换时调用，所以它可以睡眠。
	probe		This probing function gets called (during execution
			of pci_register_driver() for already existing
			devices or later if a new device gets inserted) for
			all PCI devices which match the ID table and are not
			"owned" by the other drivers yet. This function gets
			passed a "struct pci_dev *" for each device whose
			entry in the ID table matches the device. The probe
			function returns zero when the driver chooses to
			take "ownership" of the device or an error code
			(negative number) otherwise.
			The probe function always gets called from process
			context, so it can sleep.
        remove          当一个设备被移除时(在驱动注销时或者手动从热插拔槽中拔出时)会调用remove().remove函数可以睡眠。
	remove		The remove() function gets called whenever a device
			being handled by this driver is removed (either during
			deregistration of the driver or when it's manually
			pulled out of a hot-pluggable slot).
			The remove function always gets called from process
			context, so it can sleep.
        suspend         设备进入低功耗状态。
        suspend_late    设备进入低功耗状态。
	suspend		Put device into low power state.
	suspend_late	Put device into low power state.
        
        resume_early    从低功耗状态唤醒设备​​。
        resume          从低功耗状态唤醒设备​​。
	resume_early	Wake device from low power state.
	resume		Wake device from low power state.

                (请参见Documentation/power/pci.txt中对
PCI电源管理以及相关的功能.)
		(Please see Documentation/power/pci.txt for descriptions
		of PCI Power Management and the related functions.)

	shutdown        reboot_notifier_list(kernel/sys.c)中的钩子函数。目的是停止任何DMA空闲操作。对在重启前使能wake-on-lan(NIC)或者改变一个设备的电源状态有用。例如drivers/net/e100.c。
	shutdown	Hook into reboot_notifier_list (kernel/sys.c).
			Intended to stop any idling DMA operations.
			Useful for enabling wake-on-lan (NIC) or changing
			the power state of a device before reboot.
			e.g. drivers/net/e100.c.
        err_handler     查看 Documentation/PCI/pci-error-recovery.txt
	err_handler	See Documentation/PCI/pci-error-recovery.txt

ID表的结构是pci_device_id数组与一个空项的结尾。通常都被定义成const static。应避免使用过时的宏DEFINE_PCI_DEVICE_TABLE。

每个条目包括：

        vendor,device 供应商和要匹配的设备ID(或PCI_ANY_ID)

        subvendor,    子系统供应商和要匹配的设备ID(或PCI_ANY_ID)
        subdevice,

        class         设备类，子类，和匹配的接口。请参阅PCI局部总线规范的附录D或者在include / linux / pci_ids.h中类的完整列表。大多数驱动程序不需要指定class/class_mask因为供应商/设备通常是足够的。

        class_mask    限制类的哪些位参与比较。在drivers/scsi/sym53c8xx_2/查看用例。

        driver_data   驱动程序专用数据。
                      大多数驱动程序不需要使用driver_data域。
                      最佳做法是使用driver_data作为设备类型的静态列表的索引，而不是将它当作一个指针使用。


大多数驱动程序只需要PCI_DEVICE()或PCI_DEVICE_CLASS()来设置一个pci_device_id表。

新的PCI ID可在运行时被添加到设备驱动程序pci_ids表中，如下所示：

echo "vendor device subvendor subdevice class class_mask driver_data" > \
/sys/bus/pci/drivers/{driver}/new_id

The ID table is an array of struct pci_device_id entries ending with an
all-zero entry.  Definitions with static const are generally preferred.
Use of the deprecated macro DEFINE_PCI_DEVICE_TABLE should be avoided.

Each entry consists of:

	vendor,device	Vendor and device ID to match (or PCI_ANY_ID)

	subvendor,	Subsystem vendor and device ID to match (or PCI_ANY_ID)
	subdevice,

	class		Device class, subclass, and "interface" to match.
			See Appendix D of the PCI Local Bus Spec or
			include/linux/pci_ids.h for a full list of classes.
			Most drivers do not need to specify class/class_mask
			as vendor/device is normally sufficient.

	class_mask	limit which sub-fields of the class field are compared.
			See drivers/scsi/sym53c8xx_2/ for example of usage.

	driver_data	Data private to the driver.
			Most drivers don't need to use driver_data field.
			Best practice is to use driver_data as an index
			into a static list of equivalent device types,
			instead of using it as a pointer.


Most drivers only need PCI_DEVICE() or PCI_DEVICE_CLASS() to set up
a pci_device_id table.

New PCI IDs may be added to a device driver pci_ids table at runtime
as shown below:

echo "vendor device subvendor subdevice class class_mask driver_data" > \
/sys/bus/pci/drivers/{driver}/new_id


所有字段都是16进制格式数(没有0x前缀)。
供应商和设备字段是强制性的，其他都是可选的。用户需要传递尽可能多的需要的可选字段：
	o subvendor和子设备领域默认为P​​CI_ANY_ID（FFFFFFFF）
        o class和classmask字段默认为0
        o driver_data默认为0UL。
All fields are passed in as hexadecimal values (no leading 0x).
The vendor and device fields are mandatory, the others are optional. Users
need pass only as many optional fields as necessary:
	o subvendor and subdevice fields default to PCI_ANY_ID (FFFFFFFF)
	o class and classmask fields default to 0
	o driver_data defaults to 0UL.

需要注意的是，driver_data必须和在驱动中定义的pci_device_id条目使用的值相匹配。这意味着，如果所有的pci_device_id条目都有一个非零driver_data值，那么driver_data的值就是强制的。

一旦添加后，驱动将会为pci_ids列表中任何无人认领的PCI设备调用probe()。

当驱动退出，它只是调用pci_unregister_driver()，并且PCI层会为该驱动处理的所有设备自动调用remove钩函数。
Note that driver_data must match the value used by any of the pci_device_id
entries defined in the driver. This makes the driver_data field mandatory
if all the pci_device_id entries have a non-zero driver_data value.

Once added, the driver probe routine will be invoked for any unclaimed
PCI devices listed in its (newly updated) pci_ids list.

When the driver exits, it just calls pci_unregister_driver() and the PCI layer
automatically calls the remove hook for all devices handled by the driver.

1.1 驱动函数数据的属性
1.1 "Attributes" for driver functions/data

请给初始化和清理函数在合适的地方加上标记(相关的宏定义在<linux/init.h>):
	__init          初始化代码，在驱动初始化后被丢弃。
        __exit          退出代码。忽视非模块化驱动。
Please mark the initialization and cleanup functions where appropriate
(the corresponding macros are defined in <linux/init.h>):

	__init		Initialization code. Thrown away after the driver
			initializes.
	__exit		Exit code. Ignored for non-modular drivers.

关于在什么时候和什么地方使用这些属性：
        o module_init()/module_exit()函数（所有初始化函数都在其中调用）应该被标为__init__/__exit__.
	o 不要标记pci_driver.
        o 最好不要标记一个你不确定使用的函数。
Tips on when/where to use the above attributes:
	o The module_init()/module_exit() functions (and all
	  initialization functions called _only_ from these)
	  should be marked __init/__exit.

	o Do not mark the struct pci_driver.

	o Do NOT mark a function if you are not sure which mark to use.
	  Better to not mark the function than mark the function wrong.


2. 怎样手动查找PCI设备
2. How to find PCI devices manually
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PCI驱动程序应该有一个很好的理由不使用pci_register_driver()接口来搜索PCI设备。
PCI设备由多个驱动控制的主要的原因是因为一个PCI设备实现多个不同的硬件服务。
例如。组合的串口/并口/软驱控制器。

手动搜索可以使用以下构造进行：

通过供应商和设备ID搜索：
struct pci_dev *dev = NULL;
	while (dev = pci_get_device(VENDOR_ID, DEVICE_ID, dev))
		configure_device(dev);
通过设备类ID(通过类似的方式迭代):
	pci_get_class(CLASS_ID, dev)
通过vendor/device和子系统vendor/device的ID:
	pci_get_subsys(VENDOR_ID,DEVICE_ID, SUBSYS_VENDOR_ID, SUBSYS_DEVICE_ID, dev).
PCI drivers should have a really good reason for not using the
pci_register_driver() interface to search for PCI devices.
The main reason PCI devices are controlled by multiple drivers
is because one PCI device implements several different HW services.
E.g. combined serial/parallel port/floppy controller.

A manual search may be performed using the following constructs:

Searching by vendor and device ID:

	struct pci_dev *dev = NULL;
	while (dev = pci_get_device(VENDOR_ID, DEVICE_ID, dev))
		configure_device(dev);

Searching by class ID (iterate in a similar way):

	pci_get_class(CLASS_ID, dev)

Searching by both vendor/device and subsystem vendor/device ID:

	pci_get_subsys(VENDOR_ID,DEVICE_ID, SUBSYS_VENDOR_ID, SUBSYS_DEVICE_ID, dev).

您可以使用常量PCI_ANY_ID作为通配符代替VENDOR_ID或DEVICE_ID。这允许从特定的厂商检索任何的设备。

这些功能是热插拔安全的。他们递增他们返回pci_dev的引用计数。你必须最终（可能在模块卸载）通过调用pci_dev_put()递减这些设备上的引用计数。

You can use the constant PCI_ANY_ID as a wildcard replacement for
VENDOR_ID or DEVICE_ID.  This allows searching for any device from a
specific vendor, for example.

These functions are hotplug-safe. They increment the reference count on
the pci_dev that they return. You must eventually (possibly at module unload)
decrement the reference count on these devices by calling pci_dev_put().


3. 设备初始化步骤
3. Device Initialization Steps
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

正如在简介中提到，大多数PCI驱动程序需要进行如下操作对设备初始化：
	启用该设备
	请求MMIO / IOP资源
	设置DMA mask大小(用于一致和流DMA)
	分配和初始化共享控制数据(pci_allocate_coherent())
	获取设备配置空间(如果需要)
	注册IRQ处理程序(的request_irq())
	初始化非PCI(即LAN/SCSI/etc的部分)
	启用DMA/处理引擎
驱动可以在任何时候访问PCI配置空间寄存器。
（嗯，大多数情况是这样。当运行BIST，配置空间会被丢掉...但
那只会导致PCI总线主控中止，配置读将失败）。
As noted in the introduction, most PCI drivers need the following steps
for device initialization:

	Enable the device
	Request MMIO/IOP resources
	Set the DMA mask size (for both coherent and streaming DMA)
	Allocate and initialize shared control data (pci_allocate_coherent())
	Access device configuration space (if needed)
	Register IRQ handler (request_irq())
	Initialize non-PCI (i.e. LAN/SCSI/etc parts of the chip)
	Enable DMA/processing engines.

The driver can access PCI config space registers at any time.
(Well, almost. When running BIST, config space can go away...but
that will just result in a PCI Bus Master Abort and config reads
will return garbage).

3.1启用PCI设备
~~~~~~~~~~~~~~~~~~~~~~~~~
在接触任何设备寄存器前，驱动需要通过调用pci_enable_device（）启用设备。这会：
	o 如果设备在挂起状态，就唤醒它，
	o 分配I / O和设备的内存区域（如果BIOS没有分配），
	o 分配一个中断号（如果BIOS没有分配）。

注：pci_enable_device（）可能会失败！检查返回值。

3.1 Enable the PCI device
~~~~~~~~~~~~~~~~~~~~~~~~~
Before touching any device registers, the driver needs to enable
the PCI device by calling pci_enable_device(). This will:
	o wake up the device if it was in suspended state,
	o allocate I/O and memory regions of the device (if BIOS did not),
	o allocate an IRQ (if BIOS did not).

NOTE: pci_enable_device() can fail! Check the return value.

[OS BUG：我们不能在启用设备的资源前检查这些资源的分配。所以在调用pci_enable_device（）之前调用pci_request_resources（）。目前，设备驱动无法检测两个设备已被分配了相同的范围的错误。这不是一个普通的问题并且不可能得到尽快解决。
这之前已经讨论过，但从2.6.19起就没有改变：
	http://lkml.org/lkml/2006/3/2/194
]

pci_set_master（）通过在PCI_COMMAND寄存器中设置总线控制位启用DMA。如果它被BIOS设置为假值，它还会恢复了延迟时间计时器的值。pci_clear_master（）将通过清除总线控制位禁用DMA。

[ OS BUG: we don't check resource allocations before enabling those
  resources. The sequence would make more sense if we called
  pci_request_resources() before calling pci_enable_device().
  Currently, the device drivers can't detect the bug when when two
  devices have been allocated the same range. This is not a common
  problem and unlikely to get fixed soon.

  This has been discussed before but not changed as of 2.6.19:
	http://lkml.org/lkml/2006/3/2/194
]

pci_set_master() will enable DMA by setting the bus master bit
in the PCI_COMMAND register. It also fixes the latency timer value if
it's set to something bogus by the BIOS.  pci_clear_master() will
disable DMA by clearing the bus master bit.

如果PCI设备可使用PCI内存写无效的功能，调用pci_set_mwi（）。这置位了MEM-WR-Inval中的PCI_COMMAND位并且也保证了高速缓存寄存器的大小设置正确。检查pci_set_mwi的返回值，因为不是所有的架构或芯片组可支持内存写无效。或者，如果使用MEM-WR-Inval很好，但不是必需的，调用pci_try_set_mwi（），使系统在启用MEM-WR-Inval尽最大努力。
If the PCI device can use the PCI Memory-Write-Invalidate transaction,
call pci_set_mwi().  This enables the PCI_COMMAND bit for Mem-Wr-Inval
and also ensures that the cache line size register is set correctly.
Check the return value of pci_set_mwi() as not all architectures
or chip-sets may support Memory-Write-Invalidate.  Alternatively,
if Mem-Wr-Inval would be nice to have but is not required, call
pci_try_set_mwi() to have the system do its best effort at enabling
Mem-Wr-Inval.

3.2 请求MMIO / IOP资源
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
内存（MMIO），以及I / O端口地址不能直接从PCI设备配置空间读取。由体系结构特定的内核支持下，使用pci_dev结构中的值，因为PCI“总线地址”可能已被重新映射到一个“主机物理”地址。

见Documentation/io-mapping.txt如何访问设备寄存器或设备内存。

设备驱动需要调用pci_request_region（），来验证没有其他设备已经使用相同的地址资源。
相反，驱动程序应该调用pci_release_region（）在调用pci_disable_device（）后。
这样做是为了防止两个设备使用相同的地址范围的冲突。

[见上面OS BUG的解释。目前（2.6.19），驱动只能在调用pci_enable_device()之后确定MMIO和IO端口资源的可用性。]
3.2 Request MMIO/IOP resources
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Memory (MMIO), and I/O port addresses should NOT be read directly
from the PCI device config space. Use the values in the pci_dev structure
as the PCI "bus address" might have been remapped to a "host physical"
address by the arch/chip-set specific kernel support.

See Documentation/io-mapping.txt for how to access device registers
or device memory.

The device driver needs to call pci_request_region() to verify
no other device is already using the same address resource.
Conversely, drivers should call pci_release_region() AFTER
calling pci_disable_device().
The idea is to prevent two devices colliding on the same address range.

[ See OS BUG comment above. Currently (2.6.19), The driver can only
  determine MMIO and IO Port resource availability _after_ calling
  pci_enable_device(). ]

pci_request_region（）包含request_mem_region（）（对于MMIO范围）和request_region（）（用于IO端口范围）的特性。为没有被"normal"PCI BAR寄存器使用的地址资源使用这些函数。

另请参阅下面的pci_request_selected_regions（）。
Generic flavors of pci_request_region() are request_mem_region()
(for MMIO ranges) and request_region() (for IO Port ranges).
Use these for address resources that are not described by "normal" PCI
BARs.

Also see pci_request_selected_regions() below.

3.3设置DMA 标志位大小
~~~~~~~~~~~~~~~~~~~~~~~~~
[更多资料请参考文档/ DMA-API.txt。这部分只是一个提醒，驱动需要指示设备的DMA功能，而不是DMA接口的官方来源.]

虽然所有的驱动程序应该明确地指出PCI控制总线的DMA功能（例如，32或64位），但是超过32位控制总线能力的数据流需要驱动通过调用pci_set_dma_mask()来注册这种能力。一般来说，这使内存超过4G以上的系统的DMA更有效。

驱动程序对所有PCI-X和PCIe兼容设备必须调用
pci_set_dma_mask（），因为它们都是64位DMA设备。
3.3 Set the DMA mask size
~~~~~~~~~~~~~~~~~~~~~~~~~
[ If anything below doesn't make sense, please refer to
  Documentation/DMA-API.txt. This section is just a reminder that
  drivers need to indicate DMA capabilities of the device and is not
  an authoritative source for DMA interfaces. ]

While all drivers should explicitly indicate the DMA capability
(e.g. 32 or 64 bit) of the PCI bus master, devices with more than
32-bit bus master capability for streaming data need the driver
to "register" this capability by calling pci_set_dma_mask() with
appropriate parameters.  In general this allows more efficient DMA
on systems where System RAM exists above 4G _physical_ address.

对所有PCI-X和PCIe兼容的设备的驱动必须调用pci_set_dma_mask()作为因为它们是64位的DMA设备.
Drivers for all PCI-X and PCIe compliant devices must call
pci_set_dma_mask() as they are 64-bit DMA devices.


类似，驱动也通过调用pci_set_consistent_dma_mask必须“注册”这种能力，如果设备可以直接寻址RAM 4G以上的物理地址的"固定内存".同样，这包括所有的PCI-X和PCIe兼容设备的驱动。许多64位的“PCI”设备（PCI-X前）和一些PCI-X设备的64位DMA可以使用流式数据下，但并不能使用一致性数据。
Similarly, drivers must also "register" this capability if the device
can directly address "consistent memory" in System RAM above 4G physical
address by calling pci_set_consistent_dma_mask().
Again, this includes drivers for all PCI-X and PCIe compliant devices.
Many 64-bit "PCI" devices (before PCI-X) and some PCI-X devices are
64-bit DMA capable for payload ("streaming") data but not control
("consistent") data.

3.4 安装共享控制数据
3.4 Setup shared control data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
一旦DMA mask被设置，驱动程序可以分配“一致的”（又名共享）内存。查阅Documentation/DMA-API.txt获取完整DMA的API。这部分是只是一个提醒，需要在设备上启用DMA之前就完成这些。

Once the DMA masks are set, the driver can allocate "consistent" (a.k.a. shared)
memory.  See Documentation/DMA-API.txt for a full description of
the DMA APIs. This section is just a reminder that it needs to be done
before enabling DMA on the device.

3.5 初始化设备寄存器
3.5 Initialize device registers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
有些驱动会需要编写特定“能力”字段或其他“特定供应商”注册初始化或复位。例如,清除挂起的中断。
Some drivers will need specific "capability" fields programmed
or other "vendor specific" register initialized or reset.
E.g. clearing pending interrupts.

3.6 注册IRQ处理程序
~~~~~~~~~~~~~~~~~~~~~~~~
调用request_irq（）是此处所描述的最后步骤，这往往只是初始化设备的另一中间步骤.此步骤通常可以推迟到设备打开时使用。

所有中断处理程序的中断线应该用IRQF_SHARED注册并使用devid来映射IRQ到设备（记住，所有PCI IRQ线可以共享）。

request_irq（）将一个中断处理程序和设备句柄与中断号关联起来。从历史上看中断数字代表
PCI设备至中断控制器的IRQ线。在MSI和MSI-X（详见下文）中,中断号是CPU“向量”。

request_irq（）还允许中断。确保在注册中断处理程序前设备是停止的，没有等待任何中断处理。

MSI和MSI-X是PCI的能力。两者都是“消息信号中断”.他们通过DMA写本地APIC(高级可中断控制器)传递中断到CPU.MSI和MSI-X之间的根本区别在于如何分配多个“向量”.MSI需要连续的向量的块,而MSI-X可以不连续分配。
3.6 Register IRQ handler
~~~~~~~~~~~~~~~~~~~~~~~~
While calling request_irq() is the last step described here,
this is often just another intermediate step to initialize a device.
This step can often be deferred until the device is opened for use.

All interrupt handlers for IRQ lines should be registered with IRQF_SHARED
and use the devid to map IRQs to devices (remember that all PCI IRQ lines
can be shared).

request_irq() will associate an interrupt handler and device handle
with an interrupt number. Historically interrupt numbers represent
IRQ lines which run from the PCI device to the Interrupt controller.
With MSI and MSI-X (more below) the interrupt number is a CPU "vector".

request_irq() also enables the interrupt. Make sure the device is
quiesced and does not have any interrupts pending before registering
the interrupt handler.

MSI and MSI-X are PCI capabilities. Both are "Message Signaled Interrupts"
which deliver interrupts to the CPU via a DMA write to a Local APIC.
The fundamental difference between MSI and MSI-X is how multiple
"vectors" get allocated. MSI requires contiguous blocks of vectors
while MSI-X can allocate several individual ones.

MSI功能可以通过调用pci_enable_msi启用（）或通过在调用request_irq（）之前调用pci_enable_msix（）。这将导致PCI将CPU矢量数据传到PCI设备功能寄存器里。
MSI capability can be enabled by calling pci_enable_msi() or
pci_enable_msix() before calling request_irq(). This causes
the PCI support to program CPU vector data into the PCI device
capability registers.

如果您的PCI设备同时支持MSI-X和MSI，尽量先启用MSI-X。
只有一个可以启用。许多架构，芯片组，或BIOS不支持MSI或MSI-X和调用pci_enable_msi / msi将失败。这要注意，因为很多驱动都有两个（或多个）中断处理程序：一个用于MSI / MSI-X和另一个为IRQs。他们根据pci_enable_msi/ msix的返回值来决定request_irq（）注册哪个处理程序。

If your PCI device supports both, try to enable MSI-X first.
Only one can be enabled at a time.  Many architectures, chip-sets,
or BIOSes do NOT support MSI or MSI-X and the call to pci_enable_msi/msix
will fail. This is important to note since many drivers have
two (or more) interrupt handlers: one for MSI/MSI-X and another for IRQs.
They choose which handler to register with request_irq() based on the
return value from pci_enable_msi/msix().

有（至少）两个真的很好的理由使用MSI：
1）MSI从定义上讲是一个专用中断向量。这意味着中断处理程序不必确认哪个设备引起了中断。

2）MSI避免DMA / IRQ竞争条件.在MSI传送时,DMA到主机内存的通路对主机的CPU们是可见的.这对于数据的一致性和避免陈旧的控制数据都很重要.这种保证使驱动能够忽略MMIO读取过程中刷新DMA流。
There are (at least) two really good reasons for using MSI:
1) MSI is an exclusive interrupt vector by definition.
   This means the interrupt handler doesn't have to verify
   its device caused the interrupt.

2) MSI avoids DMA/IRQ race conditions. DMA to host memory is guaranteed
   to be visible to the host CPU(s) when the MSI is delivered. This
   is important for both data coherency and avoiding stale control data.
   This guarantee allows the driver to omit MMIO reads to flush
   the DMA stream.

在drivers/infiniband/hw/mthca/或drivers/net/tg3.c有使用MSI/MSI-X的例子。
See drivers/infiniband/hw/mthca/ or drivers/net/tg3.c for examples
of MSI/MSI-X usage.


4. PCI设备关闭
4. PCI device shutdown
~~~~~~~~~~~~~~~~~~~~~~~
当PCI设备驱动程序被卸载，以下大部分步骤需要执行：
	禁止设备产生IRQ
	释放IRQ(free_irq())
	停止所有DMA活动
	释放DMA缓冲区（包括流和一致）
	从其他子系统注销（如SCSI或NETDEV）
	禁用设备对MMIO / IO端口地址的响应
	释放MMIO / IO端口资源
When a PCI device driver is being unloaded, most of the following
steps need to be performed:

	Disable the device from generating IRQs
	Release the IRQ (free_irq())
	Stop all DMA activity
	Release DMA buffers (both streaming and consistent)
	Unregister from other subsystems (e.g. scsi or netdev)
	Disable device from responding to MMIO/IO Port addresses
	Release MMIO/IO Port resource(s)

4.1 在设备上停止IRQs
4.1 Stop IRQs on the device
~~~~~~~~~~~~~~~~~~~~~~~~~~~
如何做到这一点是芯片/设备特定的。如果它不这样做，它会打开“尖叫中断”的可能性，如果（且仅当）该IRQ与其它设备共享。
How to do this is chip/device specific. If it's not done, it opens
the possibility of a "screaming interrupt" if (and only if)
the IRQ is shared with another device.


当共享IRQ处理程序“脱钩”，其余使用相同IRQ线的设备将仍然需要启用IRQ。因此，如果“脱钩”的设备断言IRQ线时，系统会假设这是剩下的设备断言IRQ线路。由于没有其他设备将处理IRQ，该系统将“挂起”，直到它决定了IRQ不会得到处理并且标记IRQ（100,000次迭代之后）。一旦共享的IRQ被屏蔽，其余设备将停止正常工作。不是一个很好的局面。
 
When the shared IRQ handler is "unhooked", the remaining devices
using the same IRQ line will still need the IRQ enabled. Thus if the
"unhooked" device asserts IRQ line, the system will respond assuming
it was one of the remaining devices asserted the IRQ line. Since none
of the other devices will handle the IRQ, the system will "hang" until
it decides the IRQ isn't going to get handled and masks the IRQ (100,000
iterations later). Once the shared IRQ is masked, the remaining devices
will stop functioning properly. Not a nice situation.

这是另一个使用MSI或MSI-X（如果可用）。
MSI和MSI-X被定义为是排他性的中断，因此不易受“尖叫中断”问题的影响。
This is another reason to use MSI or MSI-X if it's available.
MSI and MSI-X are defined to be exclusive interrupts and thus
are not susceptible to the "screaming interrupt" problem.


4.2 释放IRQ
4.2 Release the IRQ
~~~~~~~~~~~~~~~~~~~
一旦设备停止(没有更多中断),可以调用free_irq().这个函数会返回控制一旦挂起的中断被处理,将驱动的中断处理程序从中断号上脱钩,最后释放中断号,如果没有其他设备使用.
Once the device is quiesced (no more IRQs), one can call free_irq().
This function will return control once any pending IRQs are handled,
"unhook" the drivers IRQ handler from that IRQ, and finally release
the IRQ if no one else is using it.

4.3 停止所有DMA活动
4.3 Stop all DMA activity
~~~~~~~~~~~~~~~~~~~~~~~~~
停止所有DMA操作之前尝试取消分配DMA控制数据是非常重要的。如果不这样做可能导致内存
污染，卡死，有的芯片集的硬故障。

停止的IRQ后停止DMA可避免竞争，其中IRQ处理程序可能会重新启动DMA引擎。

虽然这一步听起来是显而易见和琐碎，一些“成熟”的驱动编写人员都没有在这一步上做对。
It's extremely important to stop all DMA operations BEFORE attempting
to deallocate DMA control data. Failure to do so can result in memory
corruption, hangs, and on some chip-sets a hard crash.

Stopping DMA after stopping the IRQs can avoid races where the
IRQ handler might restart DMA engines.

While this step sounds obvious and trivial, several "mature" drivers
didn't get this step right in the past.

4.4 释放DMA缓存
4.4 Release DMA buffers
~~~~~~~~~~~~~~~~~~~~~~~
一旦DMA停止，首先清理流DMA。即取消映射数据缓冲和返回缓冲到“上游”如果有一个所有者的话。

然后清理包含控制数据的“一致的”缓冲区。

见文档/ DMA-API.txt关于取消映射的详细信息。
Once DMA is stopped, clean up streaming DMA first.
I.e. unmap data buffers and return buffers to "upstream"
owners if there is one.

Then clean up "consistent" buffers which contain the control data.

See Documentation/DMA-API.txt for details on unmapping interfaces.

4.5 从其他子系统注销
4.5 Unregister from other subsystems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
大多数低级别的PCI设备驱动程序支持其他子系统如USB，ALSA，SCSI，NETDEV，Infiniband的，等等。确保你的驱动程序未从其他子系统失去资源。如果发生这种情况，通常的症状是当子系统试图调用已被卸载的驱动会发生Oops(惊慌).
Most low level PCI device drivers support some other subsystem
like USB, ALSA, SCSI, NetDev, Infiniband, etc. Make sure your
driver isn't losing resources from that other subsystem.
If this happens, typically the symptom is an Oops (panic) when
the subsystem attempts to call into a driver that has been unloaded.

4.6 禁用设备响应MMIO / IO端口地址
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
io_unmap（）MMIO或IO端口资源，然后调用pci_disable_device（）.这是pci_enable_device的对称相反的（）.调用pci_disable_device后不要访问设备寄存器（）.
4.6 Disable Device from responding to MMIO/IO Port addresses
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
io_unmap() MMIO or IO Port resources and then call pci_disable_device().
This is the symmetric opposite of pci_enable_device().
Do not access device registers after calling pci_disable_device().

4.7 释放MMIO / IO端口资源
4.7 Release MMIO/IO Port Resource(s)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
调用pci_release_region（）来使MMIO或IO端口范围可用。如果不这样做通常会导致无法重新加载驱动程序。
Call pci_release_region() to mark the MMIO or IO Port range as available.
Failure to do so usually results in the inability to reload the driver.


5. 如何访问PCI配置空间
5. How to access PCI config space
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
您可以使用pci_(read|write)_config_(byte|word|dword)来访问设备配置空间.配置空间是由结构pci_dev *表示的。所有这些函数成功返回0或错误代码（PCIBIOS _...），它可以通过pcibios_strerror被转换为文本字符串。多数驱动期望访问有效的PCI设备时不出现故障。
You can use pci_(read|write)_config_(byte|word|dword) to access the config
space of a device represented by struct pci_dev *. All these functions return 0
when successful or an error code (PCIBIOS_...) which can be translated to a text
string by pcibios_strerror. Most drivers expect that accesses to valid PCI
devices don't fail.

如果你没有一个struct pci_dev可用，您可以调用pci_bus_(read|write)_config_(byte|word|dword)来访问那个总线上的指定设备和功能.如果您访问的配置头的标准部分的字段，请
使用在<linux / pci.h>声明的位和存储单元的名称。

如果您需要访问扩展的PCI功能寄存器，只需要为特定的功能调用pci_find_capability()，并且它将找到的相应的寄存器块给你。
If you don't have a struct pci_dev available, you can call
pci_bus_(read|write)_config_(byte|word|dword) to access a given device
and function on that bus.

If you access fields in the standard portion of the config header, please
use symbolic names of locations and bits declared in <linux/pci.h>.

If you need to access Extended PCI Capability registers, just call
pci_find_capability() for the particular capability and it will find the
corresponding register block for you.


6. 其他有趣的功能
6. Other interesting functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pci_get_domain_bus_and_slot()	Find pci_dev corresponding to given domain,
				bus and slot and number. If the device is
				found, its reference count is increased.
pci_get_domain_bus_and_slot()	查找pci_dev相应的区域，总线和插槽和数量.如果该设备被发现了，其引用计数增加
pci_set_power_state()		设置PCI电源管理状态（0 = D0 ... 3 = D3）
pci_find_capability()		在设备功能列表中找到指定能力
pci_resource_start()		对于一个给定的PCI区域返回总线起始地址
pci_resource_end()		对于一个给定的PCI区域返回总线的结束地址
pci_resource_len()		返回一个PCI区域的字节长度
pci_set_drvdata()		给pci_dev设置专用的驱动的数据指针
pci_get_drvdata()		返回驱动的私有数据指针
pci_set_mwi()			启用内存写无效事务
pci_clear_mwi()			禁用内存写无效事务


7. 其它提示
7. Miscellaneous hints
~~~~~~~~~~~~~~~~~~~~~~
当显示的PCI设备名称向用户（例如，当一个驱动想告诉用户它发现了哪个卡），请使用pci_name（pci_dev）。

总是由一个指向pci_dev结构的指针引用PCI设备.所有PCI层函数使用该标识，它是唯一合理的。不要用总线/插槽/功能编号除了非常特殊用途 - 在与多个主总线的系统中它们的语义可以是相当复杂的。

不要试图在你的驱动程序上打开Fast Back to Back写。所有总线上的设备需要能够做到这些，所以这些需要通过平台和通用代码处理，而不是通过单独的驱动程序。

When displaying PCI device names to the user (for example when a driver wants
to tell the user what card has it found), please use pci_name(pci_dev).

Always refer to the PCI devices by a pointer to the pci_dev structure.
All PCI layer functions use this identification and it's the only
reasonable one. Don't use bus/slot/function numbers except for very
special purposes -- on systems with multiple primary buses their semantics
can be pretty complex.

Don't try to turn on Fast Back to Back writes in your driver.  All devices
on the bus need to be capable of doing it, so this is something which needs
to be handled by platform and generic code, not individual drivers.


8. 供应商和设备标识
8. Vendor and device identifications
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不需要添加新的设备ID到include/linux/pci_ids.h中。请添加PCI_VENDOR_ID_xxx的供应商和十六进制常数的设备ID。

PCI_VENDOR_ID_xxx常数是重用的。该设备ID是任意十六进制数（供应商控制的）和通常只使用在一个单一的位置，pci_device_id表。

请提交新的供应商/设备ID到pciids.sourceforge.net项目。
One is not required to add new device ids to include/linux/pci_ids.h.
Please add PCI_VENDOR_ID_xxx for vendors and a hex constant for device ids.

PCI_VENDOR_ID_xxx constants are re-used. The device ids are arbitrary
hex numbers (vendor controlled) and normally used only in a single
location, the pci_device_id table.

Please DO submit new vendor/device ids to pciids.sourceforge.net project.


9. 过时的功能
9. Obsolete functions
~~~~~~~~~~~~~~~~~~~~~
有几个功能，当你尝试应用老驱动在新的PCI接口时。它们不再存在在内核中，因为它们不与热插拔或PCI域或健全的锁机制兼容。
There are several functions which you might come across when trying to
port an old driver to the new PCI interface.  They are no longer present
in the kernel as they aren't compatible with hotplug or PCI domains or
having sane locking.

pci_find_device()	由pci_get_device()取代
pci_find_subsys()	由pci_get_subsys()取代
pci_find_slot()		由pci_get_domain_bus_and_slot()取代
pci_get_slot()		由pci_get_domain_bus_and_slot()取代

另一种方法就是使用PCI设备列表的传统PCI设备驱动程序。这仍然是可能的，但不鼓励.
The alternative is the traditional PCI device driver that walks PCI
device lists. This is still possible but discouraged.



6.其他有趣的功能
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pci_get_domain_bus_and_slot（）查找pci_dev相应的定域，
总线和插槽和数量。如果该设备是
发现，其引用计数增加。
pci_set_power_state（）设置PCI电源管理状态（0 = D0 ... 3 = D3）
pci_find_capability（）找到指定功能的设备的能力
名单。
pci_resource_start（）对于一个给定的PCI区域返回总线起始地址
pci_resource_end（）对于一个给定的PCI区域返回总线的结束地址
pci_resource_len（）返回一个PCI区域的字节长度
pci_set_drvdata（）设置专用的驱动程序的数据指针进行pci_dev
pci_get_drvdata（）返回私人司机的数据指针进行pci_dev
pci_set_mwi（）启用内存写无效交易。
pci_clear_mwi（）禁用内存写无效交易。



7.其它提示
~~~~~~~~~~~~~~~~~~~~~~

当显示的PCI设备名称向用户（例如，当一个驾驶员想
告诉一下卡就发现了用户），请使用pci_name（pci_dev）。

总是由一个指向pci_dev结构指的是PCI设备。
所有PCI层功能使用该标识，它是唯一
合理的。不要用总线/插槽/功能编号除了非常
特殊用途 - 在与多个主总线它们的语义系统
可以是相当复杂的。

不要试图打开快速背靠背写在你的驱动程序。所有设备
在总线上需要能够做的，所以这是后话，需要
通过平台和通用代码，而不是单独的驱动程序来处理。



8.供应商和设备标识
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

一种不需要添加新的装置ID为包括/ Linux的/ pci_ids.h。
请添加PCI_VENDOR_ID_xxx的供应商和十六进制常数的设备ID。

PCI_VENDOR_ID_xxx常数重新使用。该设备ID是任意
十六进制数（供应商控制的）和通常只使用在一个单一的
位置，pci_device_id表。

请不要提交新的供应商/设备ID为pciids.sourceforge.net项目。



9.过时的功能
~~~~~~~~~~~~~~~~~~~~~

有几个功能，你可能会想，当遇到
端口上的老司机到新的PCI接口。它们不再存在
在内核中，因为它们不与热插拔或PCI域或相容
有理智的锁定。

pci_find_device（）由pci_get_device被取代（）
pci_find_subsys（）由pci_get_subsys被取代（）
pci_find_slot（）由pci_get_domain_bus_and_slot被取代（）
pci_get_slot（）由pci_get_domain_bus_and_slot被取代（）


另一种方法就是走PCI传统的PCI设备驱动程序
设备列表。这仍然是可能的，但不鼓励。



10. MMIO空间和“Write Posting”
10. MMIO Space and "Write Posting"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
转换驱动的I / O端口空间到MMIO空间往往需要一些额外的改变。具体而言，“write posting”
需要处理。许多驱动程序（例如tg3，acenic，sym53c8xx_2）已经做到这一点。 I / O端口空间保证在CPU可以继续之前写入数据达到PCI设备。写入MMIO空间让CPU
在事务到达PCI设备之前继续.HW怪人称之为“Write Posting”，因为写完成被“贴”到
CPU,在事务到达其目的地之前。
Converting a driver from using I/O Port space to using MMIO space
often requires some additional changes. Specifically, "write posting"
needs to be handled. Many drivers (e.g. tg3, acenic, sym53c8xx_2)
already do this. I/O Port space guarantees write transactions reach the PCI
device before the CPU can continue. Writes to MMIO space allow the CPU
to continue before the transaction reaches the PCI device. HW weenies
call this "Write Posting" because the write completion is "posted" to
the CPU before the transaction has reached its destination.
因此，时序敏感的代码应该add_readl()，其中CPU在做其他工作之前要等待。经典的“bit bang”
(用程序实现串行通信)序列在I / O端口空间工作正常：
       for (i = 8; --i; val >>= 1) {
               outb(val & 1, ioport_reg);      /* write bit */
               udelay(10);
       }
同样的序列MMIO空间应该是：
       for (i = 8; --i; val >>= 1) {
               writeb(val & 1, mmio_reg);      /* write bit */
               readb(safe_mmio_reg);           /* flush posted write */
               udelay(10);
       }
“safe_mmio_reg”没有任何副作用

需要注意的另一种情况是重置PCI设备的时候。采用读PCI配置空间来刷新writel()。这将在所有平台上操作PCI主中止，如果想让PCI设备不响应readl()。大多数x86平台将允许MMIO读到主中止（又名“软故障”），并返回垃圾（例如，~0）。但是，许多RISC平台将崩溃（又名“硬故障”）。
Thus, timing sensitive code should add readl() where the CPU is
expected to wait before doing other work.  The classic "bit banging"
sequence works fine for I/O Port space:

       for (i = 8; --i; val >>= 1) {
               outb(val & 1, ioport_reg);      /* write bit */
               udelay(10);
       }

The same sequence for MMIO space should be:

       for (i = 8; --i; val >>= 1) {
               writeb(val & 1, mmio_reg);      /* write bit */
               readb(safe_mmio_reg);           /* flush posted write */
               udelay(10);
       }

It is important that "safe_mmio_reg" not have any side effects that
interferes with the correct operation of the device.

Another case to watch out for is when resetting a PCI device. Use PCI
Configuration space reads to flush the writel(). This will gracefully
handle the PCI master abort on all platforms if the PCI device is
expected to not respond to a readl().  Most x86 platforms will allow
MMIO reads to master abort (a.k.a. "Soft Fail") and return garbage
(e.g. ~0). But many RISC platforms will crash (a.k.a."Hard Fail").

